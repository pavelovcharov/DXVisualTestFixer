<UserControl x:Class="DXVisualTestFixer.UI.Views.MainView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:DXVisualTestFixer.UI.Views"
             xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon"
             xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
             xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
             xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
             xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"
             xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
             xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit"
             xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
             xmlns:controls="clr-namespace:DXVisualTestFixer.UI.Controls"
             xmlns:viewModels="clr-namespace:DXVisualTestFixer.UI.ViewModels"
             xmlns:behaviors="clr-namespace:DXVisualTestFixer.UI.Behaviors"
             xmlns:converters="clr-namespace:DXVisualTestFixer.UI.Converters"
             xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
             xmlns:sys="clr-namespace:System.Collections;assembly=mscorlib"
             xmlns:sys1="clr-namespace:System;assembly=mscorlib"
             xmlns:prism="http://prismlibrary.com/"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:common="clr-namespace:DXVisualTestFixer.Common;assembly=DXVisualTestFixer.Common"
             xmlns:prismcommon="clr-namespace:DXVisualTestFixer.UI.PrismCommon"
             xmlns:dxfui="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui"
             xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
             xmlns:core="http://schemas.dxvisualtests.com/winfx/2008/xaml/core"
             xmlns:root="clr-namespace:DXVisualTestFixer.UI"
             xmlns:dxght="http://schemas.devexpress.com/winfx/2008/xaml/grid/internal"
             prism:ViewModelLocator.AutoWireViewModel="True"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/DXVisualTestFixer.UI;component/Resources/Services.xaml"/>
                <ResourceDictionary Source="/DXVisualTestFixer.UI;component/Resources/FilterPanelControlResources.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <dxmvvm:ObjectToObjectConverter x:Key="StatusToVisibilityConverter" DefaultTarget="Collapsed">
                <dxmvvm:MapItem Source="Loading" Target="Visible"/>
            </dxmvvm:ObjectToObjectConverter>
            <converters:StackPanelToTooltipConverter x:Key="StackPanelToTooltipConverter"/>
            <dxmvvm:ObjectToObjectConverter x:Key="ribbonMergeConverter" DefaultTarget="All">
                <dxmvvm:MapItem Source="{x:Null}" Target="None"/>
            </dxmvvm:ObjectToObjectConverter>
            <Style TargetType="{x:Type dxe:ComboBoxEdit}">
                <Setter Property="Margin" Value="4"/>
            </Style>
            <Style TargetType="{x:Type Button}">
                <Setter Property="Margin" Value="4"/>
            </Style>
            <Style TargetType="{x:Type dxg:GroupRowCheckBoxSelector}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <dxe:CheckEdit x:Name="PART_CheckBoxRowSelector" 
                                                   Padding="0" 
                                                   Focusable="False" 
                                                   VerticalAlignment="Center"
                                                   Margin="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=CheckBoxSelectorMargin}}" 
                                                   IsChecked="{Binding AllItemsSelected, Mode=TwoWay}"
                                                   IsEnabled="{Binding EnabledSelected}" >
                                <dxg:GridViewHitInfoBase.HitTestAcceptor>
                                    <dxght:GroupRowCheckBoxTableViewHitTestAcceptor />
                                </dxg:GridViewHitInfoBase.HitTestAcceptor>
                            </dxe:CheckEdit>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding View.ActualShowCheckBoxInGroupRow}"  Value="True">
                                    <Setter Property="IsEnabled" TargetName="PART_CheckBoxRowSelector" Value="True"/>
                                    <Setter Property="Visibility" TargetName="PART_CheckBoxRowSelector" Value="Visible"/>
                                    <Setter Property="IsReadOnly" TargetName="PART_CheckBoxRowSelector" Value="{DXBinding 'GroupLevel == 0'}"/>
                                    <Setter Property="IsChecked" TargetName="PART_CheckBoxRowSelector" Value="{Binding IsChecked, Mode=TwoWay}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="dxg:GroupValuePresenter">
                <Setter Property="Margin" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupValuePresenterMargin}}" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource StackPanelToTooltipConverter}">
                            <Binding Path="."/>
                            <Binding Path="IsMouseOver" RelativeSource="{RelativeSource Self}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="dxg:GroupValuePresenter">
                            <StackPanel x:Name="PART_GroupValuesPanel" Orientation="Horizontal" VerticalAlignment="Center" Margin="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowContentMargin}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <i:Interaction.Triggers>
        <prism:InteractionRequestTrigger SourceObject="{Binding ConfirmationRequest}">
            <prismcommon:PopupDXDialogWindowAction IsModal="True" CenterOverAssociatedObject="True" WindowStyle="{StaticResource NotificationWindowStyle}">
                <prismcommon:PopupDXDialogWindowAction.WindowContent>
                    <ContentControl Content="{Binding Converter={converters:NotificationContentConverter}}" ContentTemplate="{StaticResource NotificationWindowTemplate}"/>
                </prismcommon:PopupDXDialogWindowAction.WindowContent>
            </prismcommon:PopupDXDialogWindowAction>
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger SourceObject="{Binding SettingsRequest}">
            <prismcommon:PopupDXDialogWindowAction IsModal="True" CenterOverAssociatedObject="True" WindowStyle="{StaticResource DialogWindowStyle}">
                <prismcommon:PopupDXDialogWindowAction.WindowContent>
                    <ContentControl Content="{Binding Converter={converters:NotificationContentConverter}}">
                        <ContentControl.ContentTemplate>
                            <DataTemplate>
                                <local:SettingsView/>
                            </DataTemplate>
                        </ContentControl.ContentTemplate>
                    </ContentControl>
                </prismcommon:PopupDXDialogWindowAction.WindowContent>
            </prismcommon:PopupDXDialogWindowAction>
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger SourceObject="{Binding ApplyChangesRequest}">
            <prismcommon:PopupDXDialogWindowAction IsModal="True" CenterOverAssociatedObject="True" WindowStyle="{StaticResource DialogWindowStyle}">
                <prismcommon:PopupDXDialogWindowAction.WindowContent>
                    <ContentControl Content="{Binding Converter={converters:NotificationContentConverter}}">
                        <ContentControl.ContentTemplate>
                            <DataTemplate>
                                <local:ApplyChangesView/>
                            </DataTemplate>
                        </ContentControl.ContentTemplate>
                    </ContentControl>
                </prismcommon:PopupDXDialogWindowAction.WindowContent>
            </prismcommon:PopupDXDialogWindowAction>
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger SourceObject="{Binding RepositoryOptimizerRequest}">
            <prismcommon:PopupDXDialogWindowAction IsModal="True" CenterOverAssociatedObject="True" WindowStyle="{StaticResource DialogWindowStyle}">
                <prismcommon:PopupDXDialogWindowAction.WindowContent>
                    <ContentControl Content="{Binding Converter={converters:NotificationContentConverter}}">
                        <ContentControl.ContentTemplate>
                            <DataTemplate>
                                <local:RepositoryOptimizerView/>
                            </DataTemplate>
                        </ContentControl.ContentTemplate>
                    </ContentControl>
                </prismcommon:PopupDXDialogWindowAction.WindowContent>
            </prismcommon:PopupDXDialogWindowAction>
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger SourceObject="{Binding RepositoryAnalyzerRequest}">
            <prismcommon:PopupDXDialogWindowAction IsModal="True" CenterOverAssociatedObject="True" WindowStyle="{StaticResource DialogWindowStyle}">
                <prismcommon:PopupDXDialogWindowAction.WindowContent>
                    <ContentControl Content="{Binding Converter={converters:NotificationContentConverter}}">
                        <ContentControl.ContentTemplate>
                            <DataTemplate>
                                <local:RepositoryAnalyzerView/>
                            </DataTemplate>
                        </ContentControl.ContentTemplate>
                    </ContentControl>
                </prismcommon:PopupDXDialogWindowAction.WindowContent>
            </prismcommon:PopupDXDialogWindowAction>
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger SourceObject="{Binding ViewResourcesRequest}">
            <prismcommon:PopupDXDialogWindowAction IsModal="True" CenterOverAssociatedObject="True" WindowStyle="{StaticResource DialogWindowStyle}">
                <prismcommon:PopupDXDialogWindowAction.WindowContent>
                    <ContentControl Content="{Binding Converter={converters:NotificationContentConverter}}">
                        <ContentControl.ContentTemplate>
                            <DataTemplate>
                                <local:ViewResourcesView/>
                            </DataTemplate>
                        </ContentControl.ContentTemplate>
                    </ContentControl>
                </prismcommon:PopupDXDialogWindowAction.WindowContent>
            </prismcommon:PopupDXDialogWindowAction>
        </prism:InteractionRequestTrigger>
    </i:Interaction.Triggers>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <dxr:RibbonControl RibbonStyle="Office2010" ToolbarShowMode="ShowAbove" AllowCustomization="False" MinimizationButtonVisibility="Collapsed" RibbonHeaderVisibility="Visible" 
                           ToolbarShowCustomizationButton="False" ShowApplicationButton="False"
                           AsyncMergingEnabled="True">
            <dxr:RibbonDefaultPageCategory>
                <dxr:RibbonPage Caption="Main">
                    <dxr:RibbonPageGroup Caption="Work">
                        <dxb:BarButtonItem RibbonStyle="Large" 
                                           GlyphSize="Large" 
                                           Content="Sync Tests Info"
                                           KeyGesture="F5" dxb:BarManager.KeyGestureWorkingMode="AllKeyGesture"
                                           Command="{DXCommand Execute='RefreshTestList()'}"
                                           LargeGlyph="{dx:DXImageOffice2013 Image=Refresh_32x32.png}">
                        </dxb:BarButtonItem>
                        <dxb:BarButtonItem
                            RibbonStyle="Large" 
                            GlyphSize="Large" 
                            Content="Apply Changes"
                            Command="{DXCommand Execute='ApplyChanges()'}"
                            LargeGlyph="{dx:DXImageOffice2013 Image=Apply_32x32.png}"
                            IsEnabled="{DXBinding Expr='TestsToCommitCount gt 0'}">
                            <dxb:BarButtonItem.GlyphTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <dx:DXImage Source="{dx:DXImageOffice2013 Image=Apply_32x32.png}"/>
                                        <Border Width="16" Height="16" CornerRadius="8" BorderThickness="1" Background="Green" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,0,-3,0"
                                                BorderBrush="White">
                                            <Border.Visibility>
                                                <Binding Path="TestsToCommitCount">
                                                    <Binding.Converter>
                                                        <dxmvvm:ObjectToObjectConverter DefaultTarget="Visible">
                                                            <dxmvvm:MapItem Source="0" Target="Collapsed"/>
                                                        </dxmvvm:ObjectToObjectConverter>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Border.Visibility>
                                            <TextBlock TextAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding TestsToCommitCount}" FontSize="9" Foreground="White"/>
                                        </Border>
                                    </Grid>
                                </DataTemplate>
                            </dxb:BarButtonItem.GlyphTemplate>
                        </dxb:BarButtonItem>
                        <dxb:BarSubItem Content="Open Solution" Glyph="pack://application:,,,/DXVisualTestFixer.UI;component/Images/CSS_Small.png" RibbonStyle="SmallWithText" 
                                        ItemLinksSource="{Binding Solutions}">
                            <dxb:BarSubItem.ItemTemplate>
                                <DataTemplate>
                                    <ContentControl>
                                        <dxb:BarButtonItem Content="{Binding Version}" Command="{DXCommand Execute='OpenSolution()'}" Glyph="{Binding Image}" GlyphSize="Small"/>
                                    </ContentControl>
                                </DataTemplate>
                            </dxb:BarSubItem.ItemTemplate>
                        </dxb:BarSubItem>
                        <dxb:BarSubItem Content="Open Folder" Glyph="pack://application:,,,/DevExpress.Images.v18.2;component/DevAV/Actions/OpenDoc_16x16.png" RibbonStyle="SmallWithText"
                                        ItemLinksSource="{Binding Solutions}">
                            <dxb:BarSubItem.ItemTemplate>
                                <DataTemplate>
                                    <ContentControl>
                                        <dxb:BarButtonItem Content="{Binding Version}" Command="{DXCommand Execute='OpenFolder()'}"/>
                                    </ContentControl>
                                </DataTemplate>
                            </dxb:BarSubItem.ItemTemplate>
                        </dxb:BarSubItem>
                    </dxr:RibbonPageGroup>
                    <dxr:RibbonPageGroup Caption="Settings">
                        <dxb:BarButtonItem
                            RibbonStyle="Large" 
                            GlyphSize="Large" 
                            Content="Settings"
                            Command="{DXCommand Execute='ShowSettings()'}"
                            LargeGlyph="{dx:DXImageOffice2013 Image=Properties_32x32.png}">
                        </dxb:BarButtonItem>
                    </dxr:RibbonPageGroup>
                </dxr:RibbonPage>
                <dxr:RibbonPage Caption="Service">
                    <dxr:RibbonPageGroup Caption="Service">
                        <dxb:BarButtonItem RibbonStyle="Large" 
                                           GlyphSize="Large" 
                                           Content="Check Unused Files"
                                           Command="{DXCommand Execute='ShowRepositoryOptimizer()'}"
                                           LargeGlyph="{dx:DXImageOffice2013 Image=RemoveItem_32x32.png}">
                        </dxb:BarButtonItem>
                        <dxb:BarButtonItem RibbonStyle="Large" 
                                           GlyphSize="Large" 
                                           Content="Analyze Timings"
                                           Command="{DXCommand Execute='ShowRepositoryAnalyzer()'}"
                                           LargeGlyph="{dx:DXImageOffice2013 Image=Chart_32x32.png}">
                        </dxb:BarButtonItem>
                        <dxb:BarButtonItem RibbonStyle="Large" 
                                           GlyphSize="Large" 
                                           Content="View Resources"
                                           Command="{DXCommand Execute='ShowViewResources()'}"
                                           LargeGlyph="{dx:DXImageOffice2013 Image=Image_32x32.png}">
                        </dxb:BarButtonItem>
                    </dxr:RibbonPageGroup>
                </dxr:RibbonPage>
            </dxr:RibbonDefaultPageCategory>
        </dxr:RibbonControl>
        <dxdo:DockLayoutManager Grid.Row="1">
            <dxdo:LayoutGroup AllowDrag="False">
                <dxdo:LayoutGroup AllowDrag="False" Orientation="Vertical" ItemWidth="300" AllowSplitters="False">
                    <dxdo:LayoutPanel ShowCaption="False" ItemHeight="Auto" Caption="Filters" Visibility="{Binding Tests, Converter={dx:NullableToVisibilityConverter}}">
                        <controls:FilterPanelControl dxfui:FilterElement.Context="{Binding FilteringContext, ElementName=PART_GridTests}"
                                                     HasFixedTests="{Binding Tests, Converter={converters:HasFixedTestsConverter}}"/>
                    </dxdo:LayoutPanel>
                    <dxdo:LayoutPanel ShowCaption="False" ItemHeight="*">
                        <dxg:GridControl x:Name="PART_GridTests" ItemsSource="{Binding Tests}" CurrentItem="{Binding CurrentTest, Mode=TwoWay}" AutoExpandAllGroups="True" ShowBorder="False" 
                                         FixedFilter="{Binding CurrentFilter}" AllowLiveDataShaping="True"
                                         ShowAllTableValuesInFilterPopup="True" FilterString="[$ ]([Valid])">
                            <dxg:GridColumn FieldName="Version" GroupIndex="0" MergeWithPreviousGroup="False" Header="Version"/>
                            <dxg:GridColumn FieldName="TeamName" GroupIndex="1" MergeWithPreviousGroup="True" Header="Team"/>
                            <dxg:GridColumn FieldName="TestInfo.Name" GroupIndex="2" MergeWithPreviousGroup="False" Header="Name"/>
                            <dxg:GridColumn FieldName="CommitChange" Header="Commit" Width="29">
                                <dxg:GridColumn.CellTemplate>
                                    <DataTemplate>
                                        <dxe:CheckEdit HorizontalAlignment="Center" IsChecked="{Binding Path=RowData.Row.CommitChange, UpdateSourceTrigger=PropertyChanged}" EditMode="InplaceActive">
                                            <dxe:CheckEdit.IsEnabled>
                                                <Binding Path="RowData.Row.Valid">
                                                    <Binding.Converter>
                                                        <dxmvvm:ObjectToObjectConverter DefaultTarget="True">
                                                            <dxmvvm:MapItem Source="Error" Target="False"/>
                                                        </dxmvvm:ObjectToObjectConverter>
                                                    </Binding.Converter>
                                                </Binding>
                                            </dxe:CheckEdit.IsEnabled>
                                        </dxe:CheckEdit>
                                    </DataTemplate>
                                </dxg:GridColumn.CellTemplate>
                            </dxg:GridColumn>
                            <dxg:GridColumn FieldName="TestInfo.Theme" Width="*" Header="Theme" AllowEditing="False">
                                <dxg:GridColumn.CellTemplate>
                                    <DataTemplate>
                                        <DataTemplate.Resources>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="Padding" Value="3"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                                <Setter Property="CornerRadius" Value="3"/>
                                                <Setter Property="Margin" Value="2,0,0,0"/>
                                                <Setter Property="VerticalAlignment" Value="Center"/>
                                            </Style>
                                        </DataTemplate.Resources>
                                        <Grid HorizontalAlignment="Left">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <dxe:TextEdit x:Name="PART_Editor"/>
                                            <StackPanel Grid.Column="1" Orientation="Horizontal">
                                                <Border Background="LightGray" Visibility="{Binding Path=RowData.Row.Optimized, Converter={dx:BooleanToVisibilityConverter}}">
                                                    <TextBlock Text="Optimized" Foreground="Black" FontSize="8"/>
                                                </Border>
                                                <Border Background="Gray">
                                                    <Border.Visibility>
                                                        <Binding Path="RowData.Row.Dpi">
                                                            <Binding.Converter>
                                                                <dxmvvm:ObjectToObjectConverter DefaultTarget="Visible">
                                                                    <dxmvvm:MapItem Source="96" Target="Collapsed"/>
                                                                    <dxmvvm:MapItem Source="0" Target="Collapsed"/>
                                                                </dxmvvm:ObjectToObjectConverter>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Border.Visibility>
                                                    <TextBlock Text="{Binding RowData.Row.Dpi}" Foreground="White" FontSize="8"/>
                                                </Border>
                                                <Border Background="Green" Visibility="{Binding Path=RowData.Row.ImageEquals, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                                                    <TextBlock Text="IMG EQ" Foreground="White" FontSize="8"/>
                                                </Border>
                                            </StackPanel>
                                        </Grid>
                                        <!--<StackPanel Orientation="Horizontal">
                                            <dxe:TextEdit x:Name="PART_Editor"/>
                                            <Border Background="Gray" Visibility="{Binding Path=RowData.Row.TestInfo.Optimized, Converter={dx:BooleanToVisibilityConverter}}">
                                                <TextBlock Text="Optimized" Foreground="White" FontSize="8"/>
                                            </Border>
                                            <Border Background="Black">
                                                <Border.Visibility>
                                                    <Binding Path="RowData.Row.Dpi">
                                                        <Binding.Converter>
                                                            <dxmvvm:ObjectToObjectConverter DefaultTarget="Visible">
                                                                <dxmvvm:MapItem Source="96" Target="Collapsed"/>
                                                                <dxmvvm:MapItem Source="0" Target="Collapsed"/>
                                                            </dxmvvm:ObjectToObjectConverter>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </Border.Visibility>
                                                <TextBlock Text="{Binding RowData.Row.Dpi}" Foreground="White" FontSize="8"/>
                                            </Border>
                                            <Border Background="Green" Visibility="{Binding Path=RowData.Row.ImageEquals, Converter={dxmvvm:BooleanToVisibilityConverter}}">
                                                <TextBlock Text="IMG EQ" Foreground="White" FontSize="8"/>
                                            </Border>
                                        </StackPanel>-->
                                    </DataTemplate>
                                </dxg:GridColumn.CellTemplate>
                            </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Valid" Visible="False">
                                <dxg:GridColumn.PredefinedFilters>
                                    <dxfui:PredefinedFilterCollection>
                                        <dxfui:PredefinedFilter Name=" " Filter="?p != 'Fixed'"/>
                                    </dxfui:PredefinedFilterCollection>
                                </dxg:GridColumn.PredefinedFilters>
                            </dxg:GridColumn>
                            <dxg:GridControl.TotalSummary>
                                <dxg:GridSummaryItem SummaryType="Count" Alignment="Left"/>
                            </dxg:GridControl.TotalSummary>
                            <dxg:GridControl.View>
                                <controls:TableViewAdvNavigation x:Name="view" AllowEditing="True" ShowVerticalLines="False" ShowIndicator="False" ShowHorizontalLines="False" ShowColumnHeaders="False" 
                                                                 ShowGroupPanel="False" ShowFixedTotalSummary="True" RowDoubleClick="{DXEvent Handler='@s.ProcessDoubleClick(@args)'}"
                                                                 PreviewKeyDown="{DXEvent Handler='@s.ProcessKeyDown(@args)'}" GroupSummaryDisplayMode="Default"
                                                                 GroupRowCheckBoxFieldName="CommitChange" SearchPanelHighlightResults="False"
                                                                 ShowFilterPanelMode="Never">
                                    <dxb:BarManager.DXContextMenu>
                                        <dxb:PopupMenu>
                                            <dxb:BarButtonItem Content="Commit All In Viewport" Glyph="{dx:DXImage Image=SelectAll_16x16.png}" Command="{DXCommand Execute='@e(view).CommitAllInViewport()'}"/>
                                            <dxb:BarButtonItem Content="Clear Commits In Viewport" Glyph="{dx:DXImageOffice2013 Image=Clear_16x16.png}" Command="{DXCommand Execute='@e(view).ClearCommitsInViewport()'}"/>
                                            <dxb:BarButtonItem Content="Clear All Commits" Glyph="{dx:DXImageOffice2013 Image=Clear_16x16.png}" Command="{DXCommand Execute='ClearCommits()'}"/>
                                        </dxb:PopupMenu>
                                    </dxb:BarManager.DXContextMenu>
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxmvvm:EventToCommand EventName="MoveNext" Command="{DXCommand Execute='@s.AssociatedObject.MoveNextDataRow()'}" SourceObject="{Binding}"/>
                                        <dxmvvm:EventToCommand EventName="MovePrev" Command="{DXCommand Execute='@s.AssociatedObject.MovePrevDataRow()'}" SourceObject="{Binding}"/>
                                    </dxmvvm:Interaction.Behaviors>
                                    <controls:TableViewAdvNavigation.FormatConditions>
                                        <dxg:FormatCondition FieldName="CommitChange" ValueRule="Equal" Value1="True" PredefinedFormatName="YellowFillWithDarkYellowText" ApplyToRow="True"/>
                                        <dxg:FormatCondition FieldName="Valid" ValueRule="Equal" Value1="{x:Static common:TestState.Invalid}" PredefinedFormatName="LightRedFillWithDarkRedText" ApplyToRow="True"/>
                                        <dxg:FormatCondition FieldName="Valid" ValueRule="Equal" Value1="{x:Static common:TestState.Fixed}" PredefinedFormatName="GreenFillWithDarkGreenText" ApplyToRow="True"/>
                                    </controls:TableViewAdvNavigation.FormatConditions>
                                </controls:TableViewAdvNavigation>
                            </dxg:GridControl.View>
                        </dxg:GridControl>
                    </dxdo:LayoutPanel>
                </dxdo:LayoutGroup>
                <dxdo:LayoutGroup AllowDrag="False" Orientation="Vertical" AllowSplitters="False" Visibility="{Binding CurrentTest, Converter={dx:NullableToVisibilityConverter}}">
                    <dxdo:LayoutPanel ShowCaption="False" dxb:MergingProperties.ElementMergingBehavior="{Binding CurrentTest, Converter={StaticResource ribbonMergeConverter}}">
                        <controls:TestInfoControl Visibility="{Binding CurrentTest, Converter={dx:NullableToVisibilityConverter}}"/>
                    </dxdo:LayoutPanel>
                    <dxdo:LayoutPanel ShowBorder="False" ShowCaption="False" ItemWidth="Auto" ItemHeight="Auto">
                        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right">
                            <Button Content="Prev" Click="{DXEvent Handler='@e(view).MovePrevDataRow()'}" Width="100"/>
                            <Button Content="Next" Click="{DXEvent Handler='@e(view).MoveNextDataRow()'}" Width="100"/>
                            <Button Content="Valid And Next" Click="{DXEvent Handler='CommitCurrentTest(); @e(view).MoveNextDataRow()'}" IsEnabled="{DXBinding Expr='CurrentTest.Valid == $common:TestState.Valid'}"/>
                            <Button Content="Commit New Test" Click="{DXEvent Handler='CommitCurrentTest(); @e(view).MoveNextDataRow()'}" IsEnabled="{DXBinding Expr='CurrentTest.Valid == $common:TestState.Invalid'}"
                                Visibility="{DXBinding Expr='CurrentTest.Valid == $common:TestState.Invalid', Converter={dxmvvm:BooleanToVisibilityConverter}}"/>
                            <Button Content="Wrong And Next" Click="{DXEvent Handler='UncommitCurrentTest(); @e(view).MoveNextDataRow()'}" IsEnabled="{DXBinding Expr='CurrentTest.Valid != $common:TestState.Fixed'}"/>
                        </StackPanel>
                    </dxdo:LayoutPanel>
                </dxdo:LayoutGroup>
            </dxdo:LayoutGroup>
        </dxdo:DockLayoutManager>
        <dxr:RibbonStatusBarControl Grid.Row="2" IsSizeGripVisible="True">
            <dxr:RibbonStatusBarControl.LeftItems>
                <dxb:BarStaticItem Content="{Binding Status}" AutoSizeMode="Content"/>
                <dxb:BarEditItem EditWidth="200" EditValue="{Binding Path=LoadingProgressController.Value, Mode=OneWay}" IsVisible="{Binding Path=LoadingProgressController.IsEnabled}">
                    <dxb:BarEditItem.EditSettings>
                        <dxe:ProgressBarEditSettings IsEnabled="False" Maximum="{Binding Path=LoadingProgressController.Maximum}"/>
                    </dxb:BarEditItem.EditSettings>
                </dxb:BarEditItem>
                <dxb:BarStaticItem Content="{Binding CurrentLogLine}" AutoSizeMode="None" IsVisible="{DXBinding Expr='@s.Content ne $string.Empty'}"/>
            </dxr:RibbonStatusBarControl.LeftItems>
        </dxr:RibbonStatusBarControl>
        <Grid x:Name="loadingControl" IsHitTestVisible="True" Grid.RowSpan="3" Background="Transparent" Visibility="{Binding Status, Converter={StaticResource StatusToVisibilityConverter}}">
            <dx:WaitIndicator DeferedVisibility="True"/>
        </Grid>
    </Grid>
</UserControl>
